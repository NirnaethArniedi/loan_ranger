{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Loan ranger","text":"<p>Rapide module pour calculer diff\u00e9rents param\u00e8tres d'un emprunt immobilier.</p>"},{"location":"#dependances","title":"D\u00e9pendances","text":"<ul> <li><code>python&gt;3.10</code></li> <li><code>numpy</code></li> <li><code>scipy</code></li> </ul> <p>(For more details see <code>pyproject.toml</code> file or the Dev stuff below)</p>"},{"location":"#utilisation","title":"Utilisation","text":""},{"location":"#short-version","title":"Short version","text":"<p>Aller dans le r\u00e9pertoire ou le repo a \u00e9t\u00e9 clon\u00e9. Executer le module.</p> <pre><code>cd loan_ranger\npython -m loan_ranger\n</code></pre> <p>Et c'est tout.</p>"},{"location":"#long-version","title":"Long version","text":"<p>Importer le module dans une une console python. Appeler la fonction \"full_simu\". Et voil\u00e0.</p> <pre><code>import loan_ranger\n\nloan_ranger.full_simu()\n</code></pre>"},{"location":"#structure","title":"Structure","text":"<p>All code lives in <code>loan_ranger</code> folder.</p> <ul> <li><code>common_objects</code>: Rapide structure pour stocker input et r\u00e9sultat (plus propre que de balader des tuples \u00e0 rallonge)</li> <li><code>core_functions</code>: Sexy stuff, l\u00e0 ou sont les calculs \"compliqu\u00e9</li> <li><code>shell_interface</code>: Fonctions pour faire l'interface user: prompting, printing, regrouper le tout, etc</li> </ul> <p>See Reference for documentation</p>"},{"location":"#development-stuff","title":"Development stuff","text":"<ul> <li>Project managed with uv, run <code>uv sync</code> to install project and dependencies</li> <li>Use ruff as a formatter, included in dev dependencies (<code>uv sync --all-extras</code> to install dev dependencies)</li> <li>First version developped in a single file, docstrings and refactoring courtesy of Claude.ai</li> </ul>"},{"location":"api/summary/","title":"Summary","text":"<ul> <li>loan_ranger<ul> <li>common_objects</li> <li>core_functions</li> <li>shell_interface</li> </ul> </li> </ul>"},{"location":"api/loan_ranger/","title":"loan_ranger","text":""},{"location":"api/loan_ranger/#loan_ranger","title":"loan_ranger","text":"<p>Modules:</p> <ul> <li> <code>common_objects</code>           \u2013            </li> <li> <code>core_functions</code>           \u2013            </li> <li> <code>shell_interface</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>LoanInputs</code>           \u2013            <p>Container for loan input parameters.</p> </li> <li> <code>LoanResult</code>           \u2013            <p>Container for all results of a loan calculation.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>compute_all_quantities</code>             \u2013              <p>Compute all quantities related to a loan.</p> </li> <li> <code>full_simu</code>             \u2013              <p>Run a full loan simulation and print the results.</p> </li> </ul>"},{"location":"api/loan_ranger/#loan_ranger.LoanInputs","title":"LoanInputs","text":"<p>Container for loan input parameters.</p> <p>Attributes:</p> <ul> <li> <code>initial_capital</code>               (<code>float</code>)           \u2013            <p>Principal amount of the loan</p> </li> <li> <code>annual_rate</code>               (<code>float</code>)           \u2013            <p>Annual interest rate (as a decimal, e.g., 0.05 for 5%)</p> </li> <li> <code>month_number</code>               (<code>int</code>)           \u2013            <p>Total number of monthly payments</p> </li> <li> <code>initial_cost</code>               (<code>float</code>)           \u2013            <p>Upfront fees paid at loan origination</p> </li> <li> <code>insurance_cost</code>               (<code>float</code>)           \u2013            <p>Total cost of insurance over the life of the loan</p> </li> </ul>"},{"location":"api/loan_ranger/#loan_ranger.LoanResult","title":"LoanResult","text":"<p>Container for all results of a loan calculation.</p> <p>Attributes:</p> <ul> <li> <code>monthly_installment_no_insurance</code>               (<code>float</code>)           \u2013            <p>Monthly payment amount excluding insurance costs</p> </li> <li> <code>full_installments</code>               (<code>float</code>)           \u2013            <p>Average monthly payment including all costs (principal, interest, insurance)</p> </li> <li> <code>total_interests</code>               (<code>float</code>)           \u2013            <p>Total interest paid over the life of the loan</p> </li> <li> <code>total_cost_no_insurance</code>               (<code>float</code>)           \u2013            <p>Total cost of the loan excluding insurance (interest + initial costs)</p> </li> <li> <code>total_cost</code>               (<code>float</code>)           \u2013            <p>Total cost of the loan including all expenses (interest + initial costs + insurance)</p> </li> <li> <code>full_taeg</code>               (<code>float</code>)           \u2013            <p>Taux Annuel Effectif Global (Annual Percentage Rate) including all costs</p> </li> <li> <code>taea</code>               (<code>float</code>)           \u2013            <p>Taux Annuel Effectif d'Assurance (Effective Annual Insurance Rate)</p> </li> </ul>"},{"location":"api/loan_ranger/#loan_ranger.compute_all_quantities","title":"compute_all_quantities","text":"<pre><code>compute_all_quantities(loan_inputs: LoanInputs) -&gt; LoanResult\n</code></pre> <p>Compute all quantities related to a loan.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>LoanResult</code>           \u2013            <p>A named tuple containing all computed loan metrics: - monthly_installment_no_insurance: Monthly payment excluding insurance - full_installments: Monthly payment including all costs - total_interests: Total interest paid - total_cost_no_insurance: Total cost excluding insurance - total_cost: Total cost including all expenses - full_taeg: Effective annual rate (APR) - taea: Effective annual insurance rate</p> </li> </ul> Notes <p>The TAEA (Taux Annuel Effectif d'Assurance) is calculated as the difference between the full TAEG and the TAEG without insurance costs. This provides a measure of the effective cost of the insurance component.</p> Source code in <code>loan_ranger/core_functions.py</code> <pre><code>def compute_all_quantities(loan_inputs: LoanInputs) -&gt; LoanResult:\n    \"\"\"\n    Compute all quantities related to a loan.\n\n    Parameters\n    ----------\n    loan_inputs : LoanInputs\n        A named tuple containing all input parameters for the loan calculation\n\n    Returns\n    -------\n    LoanResult\n        A named tuple containing all computed loan metrics:\n        - monthly_installment_no_insurance: Monthly payment excluding insurance\n        - full_installments: Monthly payment including all costs\n        - total_interests: Total interest paid\n        - total_cost_no_insurance: Total cost excluding insurance\n        - total_cost: Total cost including all expenses\n        - full_taeg: Effective annual rate (APR)\n        - taea: Effective annual insurance rate\n\n    Notes\n    -----\n    The TAEA (Taux Annuel Effectif d'Assurance) is calculated as the\n    difference between the full TAEG and the TAEG without insurance costs.\n    This provides a measure of the effective cost of the insurance component.\n    \"\"\"\n    # Unpack input parameters\n    initial_capital = loan_inputs.initial_capital\n    annual_rate = loan_inputs.annual_rate\n    month_number = loan_inputs.month_number\n    initial_cost = loan_inputs.initial_cost\n    insurance_cost = loan_inputs.insurance_cost\n\n    # Calculate monthly installment and total interest\n    monthly_installment_no_insurance, total_interests = compute_interest_cost(\n        annual_rate, month_number, initial_capital\n    )\n\n    # Calculate total costs\n    total_cost_no_insurance = total_interests + initial_cost\n    total_cost = total_cost_no_insurance + insurance_cost\n\n    # Calculate TAEG with and without insurance\n    full_taeg, full_installments = compute_taeg(month_number, total_cost, initial_cost, initial_capital)\n    taeg_no_insurance, _ = compute_taeg(month_number, total_cost_no_insurance, initial_cost, initial_capital)\n\n    # Calculate insurance effective rate\n    taea = full_taeg - taeg_no_insurance\n\n    # Return all results\n    return LoanResult(\n        monthly_installment_no_insurance,\n        full_installments,\n        total_interests,\n        total_cost_no_insurance,\n        total_cost,\n        full_taeg,\n        taea,\n    )\n</code></pre>"},{"location":"api/loan_ranger/#loan_ranger.compute_all_quantities(loan_inputs)","title":"<code>loan_inputs</code>","text":"(<code>LoanInputs</code>)           \u2013            <p>A named tuple containing all input parameters for the loan calculation</p>"},{"location":"api/loan_ranger/#loan_ranger.full_simu","title":"full_simu","text":"<pre><code>full_simu(\n    initial_capital: float = None,\n    annual_rate: float = None,\n    month_number: int = None,\n    initial_cost: float = None,\n    insurance_cost: float = None,\n) -&gt; None\n</code></pre> <p>Run a full loan simulation and print the results.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            <p>This function prints results to stdout but doesn't return a value</p> </li> </ul> Notes <p>If any parameter is None, the function will enter interactive mode and prompt the user for all required values.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; full_simu(200000, 0.02, 240, 1000, 8000)  # Direct parameters\nCapital emprunt\u00e9:                   200000.00 \u20ac\nTaux annuel:                            2.00%\nDur\u00e9e d'emprunt:                         240 mois (20.0 ann\u00e9es)\nFrais initiaux:                        1000.00 \u20ac\n...\n</code></pre> <pre><code>&gt;&gt;&gt; full_simu()  # Interactive mode\n===== Loan Calculator - Parameter Input =====\nEnter loan amount (\u20ac): 200000\nEnter annual interest rate (%): 2\n...\n</code></pre> Source code in <code>loan_ranger/shell_interface.py</code> <pre><code>def full_simu(\n    initial_capital: float = None,\n    annual_rate: float = None,\n    month_number: int = None,\n    initial_cost: float = None,\n    insurance_cost: float = None,\n) -&gt; None:\n    \"\"\"\n    Run a full loan simulation and print the results.\n\n    Parameters\n    ----------\n    initial_capital : float, optional\n        Principal amount of the loan. If None, will prompt for input.\n    annual_rate : float, optional\n        Annual interest rate (as a decimal, e.g., 0.05 for 5%). If None, will prompt for input.\n    month_number : int, optional\n        Total number of monthly payments. If None, will prompt for input.\n    initial_cost : float, optional\n        Upfront fees paid at loan origination. If None, will prompt for input.\n    insurance_cost : float, optional\n        Total cost of insurance over the life of the loan. If None, will prompt for input.\n\n    Returns\n    -------\n    None\n        This function prints results to stdout but doesn't return a value\n\n    Notes\n    -----\n    If any parameter is None, the function will enter interactive mode and\n    prompt the user for all required values.\n\n    Examples\n    --------\n    &gt;&gt;&gt; full_simu(200000, 0.02, 240, 1000, 8000)  # Direct parameters\n    Capital emprunt\u00e9:                   200000.00 \u20ac\n    Taux annuel:                            2.00%\n    Dur\u00e9e d'emprunt:                         240 mois (20.0 ann\u00e9es)\n    Frais initiaux:                        1000.00 \u20ac\n    ...\n\n    &gt;&gt;&gt; full_simu()  # Interactive mode\n    ===== Loan Calculator - Parameter Input =====\n    Enter loan amount (\u20ac): 200000\n    Enter annual interest rate (%): 2\n    ...\n    \"\"\"\n    # Check if we need interactive mode\n    if any(param is None for param in [initial_capital, annual_rate, month_number, initial_cost, insurance_cost]):\n        # Interactive mode - prompt for all parameters\n        loan_inputs = prompt_for_loan_inputs()\n    else:\n        # Direct parameter mode\n        loan_inputs = LoanInputs(\n            initial_capital=initial_capital,\n            annual_rate=annual_rate,\n            month_number=month_number,\n            initial_cost=initial_cost,\n            insurance_cost=insurance_cost,\n        )\n\n    # Compute all results\n    loan_result = compute_all_quantities(loan_inputs)\n\n    # Print results\n    print(\"\\n===== Loan Calculation Results =====\\n\")\n    pretty_print_results(loan_inputs, loan_result)\n</code></pre>"},{"location":"api/loan_ranger/#loan_ranger.full_simu(initial_capital)","title":"<code>initial_capital</code>","text":"(<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Principal amount of the loan. If None, will prompt for input.</p>"},{"location":"api/loan_ranger/#loan_ranger.full_simu(annual_rate)","title":"<code>annual_rate</code>","text":"(<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Annual interest rate (as a decimal, e.g., 0.05 for 5%). If None, will prompt for input.</p>"},{"location":"api/loan_ranger/#loan_ranger.full_simu(month_number)","title":"<code>month_number</code>","text":"(<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Total number of monthly payments. If None, will prompt for input.</p>"},{"location":"api/loan_ranger/#loan_ranger.full_simu(initial_cost)","title":"<code>initial_cost</code>","text":"(<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Upfront fees paid at loan origination. If None, will prompt for input.</p>"},{"location":"api/loan_ranger/#loan_ranger.full_simu(insurance_cost)","title":"<code>insurance_cost</code>","text":"(<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Total cost of insurance over the life of the loan. If None, will prompt for input.</p>"},{"location":"api/loan_ranger/common_objects/","title":"common_objects","text":""},{"location":"api/loan_ranger/common_objects/#loan_ranger.common_objects","title":"common_objects","text":"<p>Classes:</p> <ul> <li> <code>LoanInputs</code>           \u2013            <p>Container for loan input parameters.</p> </li> <li> <code>LoanResult</code>           \u2013            <p>Container for all results of a loan calculation.</p> </li> </ul>"},{"location":"api/loan_ranger/common_objects/#loan_ranger.common_objects.LoanInputs","title":"LoanInputs","text":"<p>Container for loan input parameters.</p> <p>Attributes:</p> <ul> <li> <code>initial_capital</code>               (<code>float</code>)           \u2013            <p>Principal amount of the loan</p> </li> <li> <code>annual_rate</code>               (<code>float</code>)           \u2013            <p>Annual interest rate (as a decimal, e.g., 0.05 for 5%)</p> </li> <li> <code>month_number</code>               (<code>int</code>)           \u2013            <p>Total number of monthly payments</p> </li> <li> <code>initial_cost</code>               (<code>float</code>)           \u2013            <p>Upfront fees paid at loan origination</p> </li> <li> <code>insurance_cost</code>               (<code>float</code>)           \u2013            <p>Total cost of insurance over the life of the loan</p> </li> </ul>"},{"location":"api/loan_ranger/common_objects/#loan_ranger.common_objects.LoanResult","title":"LoanResult","text":"<p>Container for all results of a loan calculation.</p> <p>Attributes:</p> <ul> <li> <code>monthly_installment_no_insurance</code>               (<code>float</code>)           \u2013            <p>Monthly payment amount excluding insurance costs</p> </li> <li> <code>full_installments</code>               (<code>float</code>)           \u2013            <p>Average monthly payment including all costs (principal, interest, insurance)</p> </li> <li> <code>total_interests</code>               (<code>float</code>)           \u2013            <p>Total interest paid over the life of the loan</p> </li> <li> <code>total_cost_no_insurance</code>               (<code>float</code>)           \u2013            <p>Total cost of the loan excluding insurance (interest + initial costs)</p> </li> <li> <code>total_cost</code>               (<code>float</code>)           \u2013            <p>Total cost of the loan including all expenses (interest + initial costs + insurance)</p> </li> <li> <code>full_taeg</code>               (<code>float</code>)           \u2013            <p>Taux Annuel Effectif Global (Annual Percentage Rate) including all costs</p> </li> <li> <code>taea</code>               (<code>float</code>)           \u2013            <p>Taux Annuel Effectif d'Assurance (Effective Annual Insurance Rate)</p> </li> </ul>"},{"location":"api/loan_ranger/core_functions/","title":"core_functions","text":""},{"location":"api/loan_ranger/core_functions/#loan_ranger.core_functions","title":"core_functions","text":"<p>Functions:</p> <ul> <li> <code>compute_all_quantities</code>             \u2013              <p>Compute all quantities related to a loan.</p> </li> <li> <code>compute_interest_cost</code>             \u2013              <p>Compute the monthly installment and total interest cost for a loan.</p> </li> <li> <code>compute_taeg</code>             \u2013              <p>Calculate the TAEG (Taux Annuel Effectif Global) for a loan.</p> </li> </ul>"},{"location":"api/loan_ranger/core_functions/#loan_ranger.core_functions.compute_all_quantities","title":"compute_all_quantities","text":"<pre><code>compute_all_quantities(loan_inputs: LoanInputs) -&gt; LoanResult\n</code></pre> <p>Compute all quantities related to a loan.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>LoanResult</code>           \u2013            <p>A named tuple containing all computed loan metrics: - monthly_installment_no_insurance: Monthly payment excluding insurance - full_installments: Monthly payment including all costs - total_interests: Total interest paid - total_cost_no_insurance: Total cost excluding insurance - total_cost: Total cost including all expenses - full_taeg: Effective annual rate (APR) - taea: Effective annual insurance rate</p> </li> </ul> Notes <p>The TAEA (Taux Annuel Effectif d'Assurance) is calculated as the difference between the full TAEG and the TAEG without insurance costs. This provides a measure of the effective cost of the insurance component.</p> Source code in <code>loan_ranger/core_functions.py</code> <pre><code>def compute_all_quantities(loan_inputs: LoanInputs) -&gt; LoanResult:\n    \"\"\"\n    Compute all quantities related to a loan.\n\n    Parameters\n    ----------\n    loan_inputs : LoanInputs\n        A named tuple containing all input parameters for the loan calculation\n\n    Returns\n    -------\n    LoanResult\n        A named tuple containing all computed loan metrics:\n        - monthly_installment_no_insurance: Monthly payment excluding insurance\n        - full_installments: Monthly payment including all costs\n        - total_interests: Total interest paid\n        - total_cost_no_insurance: Total cost excluding insurance\n        - total_cost: Total cost including all expenses\n        - full_taeg: Effective annual rate (APR)\n        - taea: Effective annual insurance rate\n\n    Notes\n    -----\n    The TAEA (Taux Annuel Effectif d'Assurance) is calculated as the\n    difference between the full TAEG and the TAEG without insurance costs.\n    This provides a measure of the effective cost of the insurance component.\n    \"\"\"\n    # Unpack input parameters\n    initial_capital = loan_inputs.initial_capital\n    annual_rate = loan_inputs.annual_rate\n    month_number = loan_inputs.month_number\n    initial_cost = loan_inputs.initial_cost\n    insurance_cost = loan_inputs.insurance_cost\n\n    # Calculate monthly installment and total interest\n    monthly_installment_no_insurance, total_interests = compute_interest_cost(\n        annual_rate, month_number, initial_capital\n    )\n\n    # Calculate total costs\n    total_cost_no_insurance = total_interests + initial_cost\n    total_cost = total_cost_no_insurance + insurance_cost\n\n    # Calculate TAEG with and without insurance\n    full_taeg, full_installments = compute_taeg(month_number, total_cost, initial_cost, initial_capital)\n    taeg_no_insurance, _ = compute_taeg(month_number, total_cost_no_insurance, initial_cost, initial_capital)\n\n    # Calculate insurance effective rate\n    taea = full_taeg - taeg_no_insurance\n\n    # Return all results\n    return LoanResult(\n        monthly_installment_no_insurance,\n        full_installments,\n        total_interests,\n        total_cost_no_insurance,\n        total_cost,\n        full_taeg,\n        taea,\n    )\n</code></pre>"},{"location":"api/loan_ranger/core_functions/#loan_ranger.core_functions.compute_all_quantities(loan_inputs)","title":"<code>loan_inputs</code>","text":"(<code>LoanInputs</code>)           \u2013            <p>A named tuple containing all input parameters for the loan calculation</p>"},{"location":"api/loan_ranger/core_functions/#loan_ranger.core_functions.compute_interest_cost","title":"compute_interest_cost","text":"<pre><code>compute_interest_cost(\n    annual_rate: float, month_number: int, initial_capital: float\n) -&gt; tuple[float, float]\n</code></pre> <p>Compute the monthly installment and total interest cost for a loan.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>monthly_installment</code> (              <code>float</code> )          \u2013            <p>The fixed monthly payment amount</p> </li> <li> <code>total_cost</code> (              <code>float</code> )          \u2013            <p>The total interest paid over the life of the loan</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; monthly_payment, total_interest = compute_interest_cost(0.05, 360, 200000)\n&gt;&gt;&gt; print(f\"Monthly payment: {monthly_payment:.2f}\")\nMonthly payment: 1073.64\n&gt;&gt;&gt; print(f\"Total interest: {total_interest:.2f}\")\nTotal interest: 186510.40\n</code></pre> Source code in <code>loan_ranger/core_functions.py</code> <pre><code>def compute_interest_cost(annual_rate: float, month_number: int, initial_capital: float) -&gt; tuple[float, float]:\n    \"\"\"\n    Compute the monthly installment and total interest cost for a loan.\n\n    Parameters\n    ----------\n    annual_rate : float\n        Annual interest rate (as a decimal, e.g., 0.05 for 5%)\n    month_number : int\n        Total number of monthly payments\n    initial_capital : float\n        Principal amount of the loan\n\n    Returns\n    -------\n    monthly_installment : float\n        The fixed monthly payment amount\n    total_cost : float\n        The total interest paid over the life of the loan\n\n    Examples\n    --------\n    &gt;&gt;&gt; monthly_payment, total_interest = compute_interest_cost(0.05, 360, 200000)\n    &gt;&gt;&gt; print(f\"Monthly payment: {monthly_payment:.2f}\")\n    Monthly payment: 1073.64\n    &gt;&gt;&gt; print(f\"Total interest: {total_interest:.2f}\")\n    Total interest: 186510.40\n    \"\"\"\n    monthly_rate = _convert_prop_rate(annual_rate, 12)\n    monthly_installment = _installment_per_period(monthly_rate, month_number, initial_capital)\n    total_reimbursed = monthly_installment * month_number\n    total_cost = total_reimbursed - initial_capital\n    return monthly_installment, total_cost\n</code></pre>"},{"location":"api/loan_ranger/core_functions/#loan_ranger.core_functions.compute_interest_cost(annual_rate)","title":"<code>annual_rate</code>","text":"(<code>float</code>)           \u2013            <p>Annual interest rate (as a decimal, e.g., 0.05 for 5%)</p>"},{"location":"api/loan_ranger/core_functions/#loan_ranger.core_functions.compute_interest_cost(month_number)","title":"<code>month_number</code>","text":"(<code>int</code>)           \u2013            <p>Total number of monthly payments</p>"},{"location":"api/loan_ranger/core_functions/#loan_ranger.core_functions.compute_interest_cost(initial_capital)","title":"<code>initial_capital</code>","text":"(<code>float</code>)           \u2013            <p>Principal amount of the loan</p>"},{"location":"api/loan_ranger/core_functions/#loan_ranger.core_functions.compute_taeg","title":"compute_taeg","text":"<pre><code>compute_taeg(\n    month_number: int, total_cost: float, initial_cost: float, initial_capital: float\n) -&gt; tuple[float, float]\n</code></pre> <p>Calculate the TAEG (Taux Annuel Effectif Global) for a loan.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>taeg</code> (              <code>float</code> )          \u2013            <p>The effective annual percentage rate (TAEG)</p> </li> <li> <code>full_installments</code> (              <code>float</code> )          \u2013            <p>The average monthly payment including all costs</p> </li> </ul> Notes <p>This function uses numerical optimization to find the effective rate that satisfies the NPV equation for the loan. The optimization uses a root-finding algorithm with analytical derivatives for efficiency.</p> <p>The starting point for optimization (x0=0.99) is chosen to be near 1 to ensure proper convergence of the algorithm for typical loan rates.</p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>If the optimization algorithm fails to converge</p> </li> </ul> Source code in <code>loan_ranger/core_functions.py</code> <pre><code>def compute_taeg(\n    month_number: int, total_cost: float, initial_cost: float, initial_capital: float\n) -&gt; tuple[float, float]:\n    \"\"\"\n    Calculate the TAEG (Taux Annuel Effectif Global) for a loan.\n\n    Parameters\n    ----------\n    month_number : int\n        Total number of monthly payments\n    total_cost : float\n        Total cost of the loan including all expenses\n    initial_cost : float\n        Upfront fees paid at loan origination\n    initial_capital : float\n        Principal amount of the loan\n\n    Returns\n    -------\n    taeg : float\n        The effective annual percentage rate (TAEG)\n    full_installments : float\n        The average monthly payment including all costs\n\n    Notes\n    -----\n    This function uses numerical optimization to find the effective rate that\n    satisfies the NPV equation for the loan. The optimization uses a root-finding\n    algorithm with analytical derivatives for efficiency.\n\n    The starting point for optimization (x0=0.99) is chosen to be near 1 to\n    ensure proper convergence of the algorithm for typical loan rates.\n\n    Raises\n    ------\n    RuntimeError\n        If the optimization algorithm fails to converge\n    \"\"\"\n    # Calculate total amount to be repaid\n    total_reimbursed = total_cost + initial_capital\n\n    # Calculate average monthly installment\n    full_installments = _calculate_average_installment(total_reimbursed, initial_cost, month_number)\n\n    # Create the objective function for optimization\n    taeg_objective = _create_taeg_objective_function(month_number, full_installments, initial_cost, initial_capital)\n\n    # Find the rate that makes the objective function zero\n    taeg_optim = optimize.root_scalar(\n        taeg_objective,\n        x0=0.99,  # Starting near 1 for convergence\n        xtol=1e-7,\n        fprime=True,\n    )\n\n    # Convert the monthly rate to an annual rate\n    taeg = _convert_monthly_to_annual_rate(taeg_optim.root)\n\n    return float(taeg), full_installments\n</code></pre>"},{"location":"api/loan_ranger/core_functions/#loan_ranger.core_functions.compute_taeg(month_number)","title":"<code>month_number</code>","text":"(<code>int</code>)           \u2013            <p>Total number of monthly payments</p>"},{"location":"api/loan_ranger/core_functions/#loan_ranger.core_functions.compute_taeg(total_cost)","title":"<code>total_cost</code>","text":"(<code>float</code>)           \u2013            <p>Total cost of the loan including all expenses</p>"},{"location":"api/loan_ranger/core_functions/#loan_ranger.core_functions.compute_taeg(initial_cost)","title":"<code>initial_cost</code>","text":"(<code>float</code>)           \u2013            <p>Upfront fees paid at loan origination</p>"},{"location":"api/loan_ranger/core_functions/#loan_ranger.core_functions.compute_taeg(initial_capital)","title":"<code>initial_capital</code>","text":"(<code>float</code>)           \u2013            <p>Principal amount of the loan</p>"},{"location":"api/loan_ranger/shell_interface/","title":"shell_interface","text":""},{"location":"api/loan_ranger/shell_interface/#loan_ranger.shell_interface","title":"shell_interface","text":"<p>Functions:</p> <ul> <li> <code>full_simu</code>             \u2013              <p>Run a full loan simulation and print the results.</p> </li> <li> <code>pretty_print_results</code>             \u2013              <p>Print a formatted summary of loan calculation results.</p> </li> <li> <code>prompt_for_loan_inputs</code>             \u2013              <p>Interactively prompt the user for loan parameters.</p> </li> </ul>"},{"location":"api/loan_ranger/shell_interface/#loan_ranger.shell_interface.full_simu","title":"full_simu","text":"<pre><code>full_simu(\n    initial_capital: float = None,\n    annual_rate: float = None,\n    month_number: int = None,\n    initial_cost: float = None,\n    insurance_cost: float = None,\n) -&gt; None\n</code></pre> <p>Run a full loan simulation and print the results.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            <p>This function prints results to stdout but doesn't return a value</p> </li> </ul> Notes <p>If any parameter is None, the function will enter interactive mode and prompt the user for all required values.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; full_simu(200000, 0.02, 240, 1000, 8000)  # Direct parameters\nCapital emprunt\u00e9:                   200000.00 \u20ac\nTaux annuel:                            2.00%\nDur\u00e9e d'emprunt:                         240 mois (20.0 ann\u00e9es)\nFrais initiaux:                        1000.00 \u20ac\n...\n</code></pre> <pre><code>&gt;&gt;&gt; full_simu()  # Interactive mode\n===== Loan Calculator - Parameter Input =====\nEnter loan amount (\u20ac): 200000\nEnter annual interest rate (%): 2\n...\n</code></pre> Source code in <code>loan_ranger/shell_interface.py</code> <pre><code>def full_simu(\n    initial_capital: float = None,\n    annual_rate: float = None,\n    month_number: int = None,\n    initial_cost: float = None,\n    insurance_cost: float = None,\n) -&gt; None:\n    \"\"\"\n    Run a full loan simulation and print the results.\n\n    Parameters\n    ----------\n    initial_capital : float, optional\n        Principal amount of the loan. If None, will prompt for input.\n    annual_rate : float, optional\n        Annual interest rate (as a decimal, e.g., 0.05 for 5%). If None, will prompt for input.\n    month_number : int, optional\n        Total number of monthly payments. If None, will prompt for input.\n    initial_cost : float, optional\n        Upfront fees paid at loan origination. If None, will prompt for input.\n    insurance_cost : float, optional\n        Total cost of insurance over the life of the loan. If None, will prompt for input.\n\n    Returns\n    -------\n    None\n        This function prints results to stdout but doesn't return a value\n\n    Notes\n    -----\n    If any parameter is None, the function will enter interactive mode and\n    prompt the user for all required values.\n\n    Examples\n    --------\n    &gt;&gt;&gt; full_simu(200000, 0.02, 240, 1000, 8000)  # Direct parameters\n    Capital emprunt\u00e9:                   200000.00 \u20ac\n    Taux annuel:                            2.00%\n    Dur\u00e9e d'emprunt:                         240 mois (20.0 ann\u00e9es)\n    Frais initiaux:                        1000.00 \u20ac\n    ...\n\n    &gt;&gt;&gt; full_simu()  # Interactive mode\n    ===== Loan Calculator - Parameter Input =====\n    Enter loan amount (\u20ac): 200000\n    Enter annual interest rate (%): 2\n    ...\n    \"\"\"\n    # Check if we need interactive mode\n    if any(param is None for param in [initial_capital, annual_rate, month_number, initial_cost, insurance_cost]):\n        # Interactive mode - prompt for all parameters\n        loan_inputs = prompt_for_loan_inputs()\n    else:\n        # Direct parameter mode\n        loan_inputs = LoanInputs(\n            initial_capital=initial_capital,\n            annual_rate=annual_rate,\n            month_number=month_number,\n            initial_cost=initial_cost,\n            insurance_cost=insurance_cost,\n        )\n\n    # Compute all results\n    loan_result = compute_all_quantities(loan_inputs)\n\n    # Print results\n    print(\"\\n===== Loan Calculation Results =====\\n\")\n    pretty_print_results(loan_inputs, loan_result)\n</code></pre>"},{"location":"api/loan_ranger/shell_interface/#loan_ranger.shell_interface.full_simu(initial_capital)","title":"<code>initial_capital</code>","text":"(<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Principal amount of the loan. If None, will prompt for input.</p>"},{"location":"api/loan_ranger/shell_interface/#loan_ranger.shell_interface.full_simu(annual_rate)","title":"<code>annual_rate</code>","text":"(<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Annual interest rate (as a decimal, e.g., 0.05 for 5%). If None, will prompt for input.</p>"},{"location":"api/loan_ranger/shell_interface/#loan_ranger.shell_interface.full_simu(month_number)","title":"<code>month_number</code>","text":"(<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Total number of monthly payments. If None, will prompt for input.</p>"},{"location":"api/loan_ranger/shell_interface/#loan_ranger.shell_interface.full_simu(initial_cost)","title":"<code>initial_cost</code>","text":"(<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Upfront fees paid at loan origination. If None, will prompt for input.</p>"},{"location":"api/loan_ranger/shell_interface/#loan_ranger.shell_interface.full_simu(insurance_cost)","title":"<code>insurance_cost</code>","text":"(<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Total cost of insurance over the life of the loan. If None, will prompt for input.</p>"},{"location":"api/loan_ranger/shell_interface/#loan_ranger.shell_interface.pretty_print_results","title":"pretty_print_results","text":"<pre><code>pretty_print_results(loan_inputs: LoanInputs, loan_result: LoanResult) -&gt; None\n</code></pre> <p>Print a formatted summary of loan calculation results.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            <p>This function prints to stdout but doesn't return a value</p> </li> </ul> Notes <p>Output is formatted in French with appropriate currency symbols. All monetary values are displayed with 2 decimal places. Percentage values are formatted using Python's percentage formatting.</p> Source code in <code>loan_ranger/shell_interface.py</code> <pre><code>def pretty_print_results(loan_inputs: LoanInputs, loan_result: LoanResult) -&gt; None:\n    \"\"\"\n    Print a formatted summary of loan calculation results.\n\n    Parameters\n    ----------\n    loan_inputs : LoanInputs\n        Input parameters used for calculation\n    loan_result : LoanResult\n        Calculated results for the loan\n\n    Returns\n    -------\n    None\n        This function prints to stdout but doesn't return a value\n\n    Notes\n    -----\n    Output is formatted in French with appropriate currency symbols.\n    All monetary values are displayed with 2 decimal places.\n    Percentage values are formatted using Python's percentage formatting.\n    \"\"\"\n    # Unpack input parameters\n    initial_capital = loan_inputs.initial_capital\n    annual_rate = loan_inputs.annual_rate\n    month_number = loan_inputs.month_number\n    initial_cost = loan_inputs.initial_cost\n    insurance_cost = loan_inputs.insurance_cost\n\n    # Unpack result values\n    monthly_installment_no_insurance = loan_result.monthly_installment_no_insurance\n    full_installments = loan_result.full_installments\n    total_interests = loan_result.total_interests\n    total_cost_no_insurance = loan_result.total_cost_no_insurance\n    total_cost = loan_result.total_cost\n    full_taeg = loan_result.full_taeg\n    taea = loan_result.taea\n\n    # Print formatted results\n    _print_loan_result_line(\"Capital emprunt\u00e9:\", _format_currency(initial_capital))\n    _print_loan_result_line(\"Taux annuel:\", _format_percentage(annual_rate))\n    _print_loan_result_line(\"Dur\u00e9e d'emprunt:\", _format_duration(month_number))\n    _print_loan_result_line(\"Frais initiaux:\", _format_currency(initial_cost))\n    _print_loan_result_line(\"Co\u00fbt total assurance:\", _format_currency(insurance_cost))\n    _print_loan_result_line(\"Mensualit\u00e9s hors assurance:\", f\"{_format_currency(monthly_installment_no_insurance)}/mois\")\n    _print_loan_result_line(\"Mensualit\u00e9s moyennes tout compris:\", f\"{_format_currency(full_installments)}/mois\")\n    _print_loan_result_line(\"Int\u00e9r\u00eat totaux:\", _format_currency(total_interests))\n    _print_loan_result_line(\"Co\u00fbt total hors assurance:\", _format_currency(total_cost_no_insurance))\n    _print_loan_result_line(\"Co\u00fbt total:\", _format_currency(total_cost))\n    _print_loan_result_line(\"TAEG (recalcul\u00e9):\", _format_percentage(full_taeg))\n    _print_loan_result_line(\"TAEA (recalcul\u00e9):\", _format_percentage(taea))\n</code></pre>"},{"location":"api/loan_ranger/shell_interface/#loan_ranger.shell_interface.pretty_print_results(loan_inputs)","title":"<code>loan_inputs</code>","text":"(<code>LoanInputs</code>)           \u2013            <p>Input parameters used for calculation</p>"},{"location":"api/loan_ranger/shell_interface/#loan_ranger.shell_interface.pretty_print_results(loan_result)","title":"<code>loan_result</code>","text":"(<code>LoanResult</code>)           \u2013            <p>Calculated results for the loan</p>"},{"location":"api/loan_ranger/shell_interface/#loan_ranger.shell_interface.prompt_for_loan_inputs","title":"prompt_for_loan_inputs","text":"<pre><code>prompt_for_loan_inputs() -&gt; LoanInputs\n</code></pre> <p>Interactively prompt the user for loan parameters.</p> <p>Returns:</p> <ul> <li> <code>LoanInputs</code>           \u2013            <p>A named tuple containing all input parameters for the loan calculation</p> </li> </ul> Notes <p>This function handles input validation and provides help text to guide users through entering the correct values.</p> Source code in <code>loan_ranger/shell_interface.py</code> <pre><code>def prompt_for_loan_inputs() -&gt; LoanInputs:\n    \"\"\"\n    Interactively prompt the user for loan parameters.\n\n    Returns\n    -------\n    LoanInputs\n        A named tuple containing all input parameters for the loan calculation\n\n    Notes\n    -----\n    This function handles input validation and provides help text\n    to guide users through entering the correct values.\n    \"\"\"\n    print(\"\\n===== Loan Calculator - Parameter Input =====\\n\")\n\n    # Get basic loan parameters with validation\n    initial_capital = _get_float_input(\"Enter loan amount (\u20ac)\", min_value=0.01)\n    annual_rate = _get_float_input(\"Enter annual interest rate (%)\", min_value=0) / 100\n    month_number = _get_loan_duration()\n\n    # Get optional parameters with defaults\n    initial_cost = _get_float_input(\"Enter upfront fees/costs (\u20ac)\", min_value=0, default=0)\n    insurance_cost = _get_float_input(\"Enter total insurance cost over loan period (\u20ac)\", min_value=0, default=0)\n\n    # Create and return LoanInputs\n    return LoanInputs(\n        initial_capital=initial_capital,\n        annual_rate=annual_rate,\n        month_number=month_number,\n        initial_cost=initial_cost,\n        insurance_cost=insurance_cost,\n    )\n</code></pre>"}]}